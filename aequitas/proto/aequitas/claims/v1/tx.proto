syntax = "proto3";
package aequitas.claims.v1;

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "aequitas/claims/v1/claims.proto";

option go_package = "github.com/aequitas/aequitas/x/claims/types";

// Msg defines the claims Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;

  // FileClaim files an arbitration demand against a defendant
  rpc FileClaim(MsgFileClaim) returns (MsgFileClaimResponse);

  // UpdateClaimStatus updates a claim's status
  rpc UpdateClaimStatus(MsgUpdateClaimStatus) returns (MsgUpdateClaimStatusResponse);
  
  // IssueArbitrationAward issues an award for a successful claim
  rpc IssueArbitrationAward(MsgIssueArbitrationAward) returns (MsgIssueArbitrationAwardResponse);
}

message MsgFileClaim {
  option (cosmos.msg.v1.signer) = "claimant";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string claimant = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string defendant_id = 2;
  string amount_claimed = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string evidence_cid = 4; // IPFS CID for claim evidence
  ClaimType claim_type = 5;
  string jurisdiction = 6;
  string arbitration_center = 7;
  string notes = 8;
}

message MsgFileClaimResponse {
  string claim_id = 1;
}

message MsgUpdateClaimStatus {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string claim_id = 2;
  ClaimStatus status = 3;
  string notes = 4;
}

message MsgUpdateClaimStatusResponse {}

message MsgIssueArbitrationAward {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string claim_id = 2;
  string award_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string award_cid = 4; // IPFS CID for award document
  string arbitration_center = 5;
  repeated string enforcement_jurisdictions = 6;
}

message MsgIssueArbitrationAwardResponse {
  string award_id = 1;
}
