syntax = "proto3";
package aequitas.justice.v1;

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/aequitas/aequitas/x/justice/types";

// Msg defines the justice Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;

  // ExecuteJusticeBurn burns REPAR as part of reparations enforcement
  // $1 USD = 1 REPAR burned permanently
  rpc ExecuteJusticeBurn(MsgExecuteJusticeBurn) returns (MsgExecuteJusticeBurnResponse);
}

message MsgExecuteJusticeBurn {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string defendant_id = 2;
  string amount_to_burn = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string usd_value = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string evidence_cid = 5; // IPFS proof of payment
  string description = 6;
}

message MsgExecuteJusticeBurnResponse {
  string burn_id = 1;
  string total_supply_after_burn = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string total_burned_to_date = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}
